require "rails_helper"

RSpec.describe ForecastService, :vcr do
  it "calls external api OpenWeather for weather based on coordinates" do
    location = 'denver, co'
    map = MapFacade.get_coords_by_loc(location)
    json = ForecastService.forecast_by_coords(map)
    expect(json).to be_a(Hash)
    expect(json).to have_key(:lat)
    expect(json[:lat]).to eq(map.latitude.round(2))
    expect(json).to have_key(:lon)
    expect(json[:lon]).to eq(map.longitude.round(2))

    expect(json).to have_key(:current)
    expect(json[:current]).to be_a(Hash)
    expect(json[:current][:dt]).to be_an(Integer)
    expect(Time.at(json[:current][:dt])).to be_a(Time)
    expect(json[:current][:sunrise]).to be_an(Integer)
    expect(Time.at(json[:current][:sunrise])).to be_a(Time)
    expect(json[:current][:sunset]).to be_an(Integer)
    expect(Time.at(json[:current][:sunset])).to be_a(Time)
    expect(json[:current][:temp]).to be_a(Numeric)
    expect(json[:current][:feels_like]).to be_a(Numeric)
    expect(json[:current][:humidity]).to be_a(Numeric)
    expect(json[:current][:uvi]).to be_a(Numeric)
    expect(json[:current][:visibility]).to be_a(Numeric)
    expect(json[:current][:weather][0][:description]).to be_a(String)
    expect(json[:current][:weather][0][:icon]).to be_a(String)
    expect(json[:current][:temp]).to eq(45.21)
    expect(json[:current][:feels_like]).to eq(36.12)
    expect(json[:current][:humidity]).to eq(33)
    expect(json[:current][:uvi]).to eq(2.41)
    expect(json[:current][:visibility]).to eq(10000)
    expect(json[:current][:weather][0][:description]).to eq('few clouds')
    expect(json[:current][:weather][0][:icon]).to eq('02d')

    expect(json).to have_key(:daily)
    expect(json[:daily]).to be_a(Array)
    expect(json[:daily].first).to be_a(Hash)
    expect(json[:daily].first).to have_key(:temp)
    expect(json[:daily].first[:temp]).to be_a(Hash)
    expect(json[:daily].first[:temp]).to have_key(:min)
    expect(json[:daily].first[:temp][:min]).to be_a(Float)
    expect(json[:daily].first[:temp][:min]).to eq(33.13)
    expect(json[:daily].first[:temp]).to have_key(:max)
    expect(json[:daily].first[:temp][:max]).to be_an(Float)
    expect(json[:daily].first[:temp][:max]).to eq(46.51)

    expect(json).to have_key(:hourly)
    expect(json[:hourly]).to be_a(Array)
    expect(json[:hourly].first).to be_a(Hash)
    expect(json[:hourly].first).to have_key(:wind_speed)
    expect(json[:hourly].first[:wind_speed]).to be_a(Float)
    expect(json[:hourly].first[:wind_speed]).to eq(0.76)
    expect(json[:hourly].first).to have_key(:wind_deg)
    expect(json[:hourly].first[:wind_deg]).to be_an(Integer)
    expect(json[:hourly].first[:wind_deg]).to eq(100)
  end
end
